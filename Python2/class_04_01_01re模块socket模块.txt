                                                                    re模块 （正则）
使用正则需要导入re模块
import re

                                匹配单个字符  
                        -------------------------------
记号                                 说明
.                               匹配任意字符（换行符除外）单单一个字符
[...x-y...]                     匹配字符组里的任意字符
[^...x-y...]                   匹配不在字符组里的任意字符
\d                             匹配任意数字，与[0-9]同义
\D                             匹配非数字
\w                              匹配任意数字字母字符，与[0-9a-zA-Z]同义
\W                               匹配非任意数字字母字符  --空格和符号
\s                             匹配空白字符，与[\r\v\f\t\n] 同义
\S                            匹配非空白字符 

测试在vim里面  输入  / 加内容 例如    /\D 匹配非数字
搜索tm字符内容 
/t.m
/t[0-9a-z]m
/\W 
/t[-a0]m
/t[0-9^]m   和/t[^0-9]m   意义一样，取反
----------------------------------------------------------------------------------------
                               匹配一组字符   
                         --------------------------------

记号                                 说明
literal                               匹配字符串的值
re1|re2                            匹配正则表达式re1 或 re2 
*                                    匹配前面出现的正则表达式零次或多次
+                                  匹配前面出现的正则表达式一次或多次
？                                匹配前面出现的正则表达式零次或一次
{M,N}                         匹配前面出现的正则表达式至少M次最多N次

例如：
/tam\|t8m 
/t\{3,5\}m   
/t\{3,\}
/t\?m 
/t\+m   

------------------------------------------------------------------------------------------------------
                                其他元字符
                         -----------------------------------
记号                                    说明
^                                     匹配字符串的开始
$                                   匹配字符串的结尾
\b                               匹配单词的边界
()                              对正则表达式分组
\nn                        匹配已保存的子组

-------------------------------------------------------------------------------------------
                                  
                                 贪婪匹配
                          -------------------------------------
 *  + 和？ 都是贪婪匹配操作符，在其后加上？ 可以 取消其贪婪匹配行为
正则表达式匹配对象通过groups函数 获取子组  

data = "His phone number is : 150889912"
m = re.search(".+|(\d+\)",data)               #默认+ 或者 * 都是贪婪匹配
m.group()                                           #总是返回整个模式匹配到的内容
"His phone number is : 150889912"   
m.group(1)
"2"

m = re.search(".+?|(\d+\)",data)              #  ?  可以取消贪婪匹配
m.group()
"His phone number is : 150889912"   
m.group(1)
"150889912"

————————————————————————————————————————

import re
re.match("f..","food")                             #如果匹配到，返回一个匹配对象
print(re.match("f","seafood"))             #没有匹配到，返回None
m = re.match("f..","food')
m.group()






















         