                                    什么是模块   
·模块支持从逻辑上组织Python代码
·当代码量变得相当大的时候，最好把代码分成一些有组织的代码段
代码片相互间有一定的联系，可能是一个包含数据成员和方法的类，
也可能是一组相关但彼此独立的操作函数
·这些代码段是共享的，所以Python允许“调入”一个模块，
允许使用其他模块的属性来利用之前的工作成果，实现代码重用

----------------------------------------------------------------------------
                                     模块文件  
·说模块是按照逻辑来组织Python代码的方法，文件是物理层上组织模块的方法
一个文件被看作是一个独立模块，一个模块也可以被看作是一个文件
模块的文件名就是模块的名字加上扩展名.py 

------------------------------------------------------------------------------
                                     名称空间
·名称空间就是一个从名称到对象的关系映射集合
·给定一个模块名之后，只可能有一个模块被导入到Python解释器中，
所以在不同模块间不会出现名称交叉现象
·每个模块都定义了它自己的唯一的名称空间

-------------------------------------------------------------------------------
                                     模块导入方法

1.使用import导入模块
2.可以在一行导入多个模块，但是可读性会下降
import time，os，sys     #不推荐推荐，每行导入一个模块

3.可以只导入模块的某些属性
from random import choice ，randint  #只导入单个模块，常用

4.导入模块时，可以为模块取别名
import pickle as p     #取别名  ，不太常用

pycharm 可以点code  -> optimize  import可以优化导入模块（没有用到的模块将会被
移除，导入的模块按字母顺序排序）

导入模块时，Python会到这些位置搜索：
1.sys.path 定义的路径
2.环境变量PYTHONPATH定义的路径 
# export PYTHONPATH = /var/..   (路径)
 
当导入模块时，模块的顶层代码会被执行
一个模块不管被导入(import) 多少次，只会被加载(load)一次  
 
导入包
包是一个有层次的文件目录结构，为平坦的名称空间加入有层次的组织结构
允许程序员把有联系的模块组合到一起
python2.7 中 包目录下必须有一个_init_.py文件 
在Python中，目录可以当成特殊的模块，叫作包，导入mods 目录中的hello.py文件可以为 
例如  
mkdir mods  
vim  mods/hello.py
hi = "hello world"

import mods.hello
mods.hello.hi
from mods.hello import hi 
from mods import hello 
hello.hi 
-----------------------------------------------------------------------------------------
                                            hashlib 模块
hashlib 用来代替md5和sha模块，并使他们的API一致，专门提供hash算法
包括 md5 、sha1、 sha224、 sha256、 sha384 、sha512,使用非常简单方便

加密：
         对称加密 ：加解密使用相同的算法和秘钥  DES/3DES/AES
         非对称加密: 加解密使用不同的秘钥   RSA/DSA
         单向加密： 加密只能向一个方向进行，不能通过结果反推回原始数据，MD3/SHA

单向加密用途 ：1.存储加密密码 2.校验文件的完整   http://www.cmd5.com/ 可以查询 


hashlib ：可用于计算MD5值 
------------------------------------
import hashlib
m = hashlib.md5(b"123456")   #接受二进制形式
print(m.hexdigest())
e10adc3949ba59abbe56e057f20f883e
----------------------------------------

文件生成MD5

with open("/etc/passwd","rb") as fobj:
    data = fobj.read()

m = hashlib.md5(data)
print(m.hexdigest())  

————————————————————-----
MD5检测  

import sys
import hashlib
def check_md5(fname):
    m = hashlib.md5()
    with open(fname,"rb") as fobj:
        while True:
            data = fobj.read(4096)
            if not data:
                break
            m.update(data)
    return m.hexdigest()

if __name__ == '__main__':
    print(check_md5(sys.argv[1]))
------------------------------------------------------------------



























