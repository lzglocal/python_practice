  


                      记账程序
1.假设在记账时，有一万元钱
2.无论是开销还是收入都要进行记账
3.记账内容包括时间、金额和说明等
4.记账数据要求永久存储

-------------------------------------------
  import os
import pickle
import time

def cost(record):
    amount = int(input('金额：'))
    comment = input('备注：')
    date = time.strftime('%Y-%m-%d')
    with open(record, 'rb') as fobj:
        data = pickle.load(fobj)
    balance = data[-1][-2] - amount
    data.append([date, 0, amount, balance, comment])
    with open(record, 'wb') as fobj:
        pickle.dump(data, fobj)

def save(record):
    amount = int(input('金额：'))
    comment = input('备注：')
    date = time.strftime('%Y-%m-%d')
    with open(record, 'rb') as fobj:
        data = pickle.load(fobj)
    balance = data[-1][-2] + amount
    data.append([date, amount, 0, balance, comment])
    with open(record, 'wb') as fobj:
        pickle.dump(data, fobj)

def query(record):
    print('%-12s%-10s%-10s%-10s%-20s' % ('date', 'save', 'cost', 'balance', 'comment'))
    with open(record, 'rb') as fobj:
        data = pickle.load(fobj)
    for item in data:
        print('%-12s%-10s%-10s%-10s%-20s' % tuple(item))

def show_menu():
    record = r'D:\a\record.data'
    if not os.path.exists(record):
        init_data = [
            [time.strftime('%Y-%m-%d'), 0, 0, 10000, '开始记账'],
        ]
        with open(record, 'wb') as fobj:
            pickle.dump(init_data, fobj)

    cmds = {'0': cost, '1': save, '2': query}
    prompt = """(0) 记录开销
(1) 记录收入
(2) 查询收支
(3) 退出
请选择(0/1/2/3): """
    while True:
        try:
            choice = input(prompt).strip()[0]
        except IndexError:
            continue
        except (KeyboardInterrupt, EOFError):
            choice = '3'

        if choice not in '0/1/2/3':
            print('无效输入，请重试')
            continue
        if choice == '3':
            print('\nBye-bye')
            break
        cmds[choice](record)

if __name__ == '__main__':
    show_menu()

----------------------------------------------------------------------------------

                   函数定义

函数操作符
使用一对圆括号() 调用函数，如果没有圆括号，只是对函数的引用
任何输入的参数都必须放置在括号中

 def foo():
       print("in foo")
       boo()             #可以先使用再定义

 def boo():
       print("in boo")

foo()
foo           #function foo at 0x7f18ce311b18

def get_age(name,age):
    print("%s is %s years old." % (name,age))

get_age()                                   #error  没有加参数
get_age("bob",25,26)                    #error 
get_age("bob",25)                           #正确
get_age(25,"bob")                            #语法没有错误，语义不对   
get_age(age = 25,name = "bob")       #正确
get_age(age = 25, "bob")                     #语法错误，key = val 形式必须在后
get_age(25,name = "bob")                     #错误，name得到多个值
get_age("bob",age = 25)                           #正确    
 
--------------------------------------------------------------------------------------------------
参数组
Python允许程序员执行一个没有显式定义参数的函数
相应的方法是通过一个把元组（非关键字参数）或字典（关键字参数）作为参数数组传递给函数


def myfunc(*args):                       #    *标识args 是个元组
    print(args)


def myfunc2(**kwargs):                 #  **标识kwargs 是字典
    print(kwargs)



if __name__ == '__main__':
    myfunc()                                                  得到  () 
    myfunc(10)                                              得到 (10,)
    myfunc(10,20,30)                                     得到 (10, 20, 30)
    myfunc(10,20,30,"bob","tom")                  得到 (10, 20, 30, 'bob', 'tom')
    myfunc2(name="bob")                            得到 {'name': 'bob'}
    myfunc2(name="bob",age="23")             得到  {'name': 'bob', 'age': '23'} 

-------------------------------------------------------------------------------------
def add(x,y):
    print(x+y)


if __name__ == '__main__':
    alist = [10,20]
    add(*alist)                                           #调用函数时，参数加上 * 表示将序列对象拆开
    add(*"ab")                                           #将字符串拆开  
  
--------------------------------------------------------------------------------
      

     简单的加减法数学游戏
1.随机生成两个100以内的数字
2.随机选择加法或是减法
3.总是使用大的数字减去小的数字
4.如果用户错三次，程序给出正确的答案
------------------------------------------------------
import random

def add(x,y):
    return x +y

def sub(x,y):
    return x - y

def exam():
    cmds = {"+":add,"-":sub}
#cmds = {"+":lambda x,y:x+y,"-":lambda x,y:x-y}        #使用这个lambda可以忽略两个函数add和sub
    nums = [random.randint(1,100) for i in range(2)]
    nums.sort(reverse=True)    #降序排列
    op = random.choice("+-")
    prompt = "%s%s%s=" % (nums[0],op,nums[1])

    # if op == "+":
    #     result = nums[0] + nums[1]
    # else:
    #     result = nums[0] - nums[1]

    result = cmds[op](*nums)
    tries = 0
    while tries <3:
        try:
            answer=int(input(prompt))
        except (ValueError,UnboundLocalError):
            print("请输入数字")
            continue
        if answer == result:
            print("very good")
            break
        else:
            print("答错了")
            tries +=1
    else:
        print("%s%s" %(prompt,result))

if __name__ == '__main__':
    while True:
        exam()
        try:
            yn=input("continue(y/n|Y/N)").strip()[0]
        except IndexError:
            continue
        except (KeyboardInterrupt,EOFError):
            yn="n"
        if yn in "Nn":
            print("Bye-bye")
            brea

______________________________________________________________________________________________
                     
                         lambda  匿名函数

Python额允许用lambda 关键字创造匿名函数
匿名是因为不需要以标准的def 方式来声明
一个完整的lambda "语句"  代表了一个表达式，这个
表达式的定义体 必须和声明放在同一行

格式  lambda [arg1,[arg2,...argN]] : expression 
a =lambda x,y :x+y 
print(a(3,4))
7



-------------
常规 ：def  add (x,y)
                  return x +y
add(10,20)
30
------------
lambda函数
myadd = lambda x,y :x+y 
myadd(10,20)
30 

——————————————————————————————————————
                              filter  函数

.filter(func,seq) ：调用一个布尔函数 func来迭代遍历每个序列中的元素；
返回一个使func返回值为true的元素的序列
.如果布尔函数比较简单，直接使用lambda匿名函数就显得非常方便了

data = filter(lambda x :x %2,[num for num in range(10)])
print(data)                     #过滤出10以内的奇数
[1,3,5,7,9]
 

-------------------
from random import randint

def func1(n):
    return n %2

if __name__ == '__main__':
    numbs = [randint(1,100) for i in range(10)]
    print(numbs)
    print(list(filter(func1,numbs)))
    print(list(filter(lambda n:n%2,numbs)))   #效果一样  可以省略def func1(n)

得到  [29, 82, 30, 10, 60, 15, 100, 93, 88, 66]
        [29, 15, 93]
________________________________________________________________________
                               map  函数 

from random import randint

def func1(n):
    return n %2

if __name__ == '__main__':
    numbs = [randint(1,100) for i in range(10)]
    print(numbs)
    print(list(filter(func1,numbs)))
    print(list(filter(lambda n:n%2,numbs)))  
    print(list(map(func2,numbs)))                         #加工一下
    print(list(map(lambda n:n+1,numbs)))           #组合lambda 使用

——-------------------------------------------------------------------
















