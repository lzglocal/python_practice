                                 -------------------------------------------------------
                                                               Jenkins  

Jenkins是由java编写的一款开源软件
• 作为一款非常流行的CI（持续集成）工作，用于构建
和测试各种项目

持续集成
持续集成（CI）是当下最为流行的应用程序开发实践
方式
• 程序员在代码仓库中集成了修复bug、新特性开发或
是功能革新
• CI工具通过自动构建和自动测试来验证结果。这可以
检测到当前程序代码的问题，迅速提供反馈


持续集成
程序员提交代码更新
到软件仓库（SVN/GIT）-> CI服务器基于计划任务 -> CI服务器运行构建过程并生成软件包 ->CI服务器进行单元和集成测试，存储测试结果





--------------------------------------------------------------------
CI  : 持续集成  (比如jenkins)  
CD ：持续交付，持续部署

解释型语言 ： python/php/shell 
编译型语言 ： c/java/c++


java 源码生成war 包  ： 使用 maven   /ant   /gradle
 


插件管理 -> 高级->升级站点   可以设置国内插件加速 


------------------------------------------------------------------------

准备git  
1.物理主机上初始化软件项目  
git init webapp
cd webapp/
echo '<h1>my web site</h1>' >>index.html  
git add .
git commit -m 'web app 1.0.0 version'
git tag 1.0    #把当前状态打个标记，表示1.0版本 


echo '<h2>web app 2.0 </h1>' >>index.html  
git add .
git commit -m 'web app 2.0 version'
git tag 2.0    #把当前状态打个标记，表示2.0版本 

2.配置gitlab服务器 
为develop 组 创建一个名为webapp 的项目，并且进行授权
3.上传代码，采用http的方式  
git remote rename  origin old-origin   
git remote add origin http://192.168.22.130/develop.git 
git push -u origin --all           #可以使用root 
git push -u origin --tags  



------------------------------------------------------------------------
1.下载代码  
（1）在jenkins上安装git  
（2）新建一个‘自由风格’的项目，源码使用git，添写git地址，保存即可

2.指定版本
（1）修改现有的项目，添加"参数构建过程"，使用git paramether  
（2）名称指定 web_version,这就是一个变量，代表tag标记 
（3）构建，点击‘build with parameter’
（4）在源码管理下方的Branches to build 中指定${web_version} 


3.指定子目录
（1）源码管理下面选择 Additional Behaviours -> check to sub-directory  ->webapp_${web_version}
（2）重新构建

4.其他步骤 
（1）为了方便把下载的软件包进行分发，在jenkins上安装httpd  
yum -y install httpd
systemctl start httpd
systemctl enable httpd
（2）配置httpd 工作目录  
/var/www/html/deploy/packages/   ->存放软件压缩包和md5 
/var/www/html/deploy/             ->  存放版本文件
mkdir -p  /var/www/html/deploy/packages  


（3）修改jenkins项目，在“构建”选择  “增加构建步骤” ->执行shell 
脚本：

deploy_dir  = /var/www/html/deploy   
cp -r  webapp_${web_version}  $deploy_dir/packages/    #拷贝文件到httpd 文档
cd  $deploy_dir/packages/
rm -rf webapp_${web_version}/.git        #删除不必要的版本库
tar -czf webapp_${web_version}.tar.gz  web_${web_version}    #压缩
rm -rf webapp_${web_version}    #删除目录，只保留压缩文件
md5sum  webapp_${web_version}.tar.gz  || awk ‘{print $1}' > webapp_${web_version}.tar.gz.md5  #计算压缩md5值
cd $deploy_dir 
[ -f live_version ]  && cat live_version >last_version  #如果有live_version 
echo ${web_version} >live_version     #向live_version 写入最新的版本



-------------------------------------------------------------------


import os
import requests
import wget
import hashlib
import tarfile

def has_new_version(local_ver_path, live_ver_url):
    if not os.path.isfile(local_ver_path):
        return True   # 本地不存在版本文件，表明有新版本

    r = requests.get(live_ver_url)
    server_ver = r.text   # 获取服务器上版本
    with open(local_ver_path) as fobj:
        local_ver = fobj.read()   # 获取本地版本
    if server_ver != local_ver:
        return True

    return False


def check_md5(fname):
    m = hashlib.md5()
    with open(fname, 'rb') as fobj:
        while True:
            data = fobj.read(4096)
            if not data:
                break
            m.update(data)
    return m.hexdigest()


def deploy_web(local_app_path):
    web_link = '/var/www/html/nsd1807'
    deploy_dir = '/var/www/deploy/'
    os.chdir(deploy_dir)
    tar = tarfile.open(local_app_path, 'r:gz')
    tar.extractall()
    tar.close()
    app_fname = os.path.basename(local_app_path)  # webapp_1.0.tar.gz
    # 拼出/var/www/deploy/webapp_x.x
    deploy_path = os.path.join(deploy_dir, app_fname.replace('.tar.gz', ''))
    if os.path.exists(web_link):   # 链接已存在先删除，否则创建链接时报错
        os.unlink(web_link)
    os.symlink(deploy_path, web_link)  # 创建软链接

if __name__ == '__main__':
    live_ver_url = 'http://192.168.4.3/deploy/live_version'
    local_ver_path = '/var/www/download/live_version'
    r = requests.get(live_ver_url)
    live_ver = r.text.strip()  # 获取最新软件的版本号
    live_app_url = 'http://192.168.4.3/deploy/packages/webapp_%s.tar.gz' % live_ver
    local_app_path = '/var/www/download/webapp_%s.tar.gz' % live_ver
    live_md5_url = 'http://192.168.4.3/deploy/packages/webapp_%s.tar.gz.md5' % live_ver

    if not has_new_version(local_ver_path, live_ver_url):
        print('没有发现新版本')
        exit(1)

    # 如果有新版本则向下执行
    wget.download(live_app_url, local_app_path)
    local_md5 = check_md5(local_app_path)  # 计算下载下来的软件md5值
    r = requests.get(live_md5_url)
    live_md5 = r.text.strip()   # 获取jenkins服务器上的md5值
    if local_md5 != live_md5:
        print('文件在下载过程中已损坏')
        exit(2)

    # 如果下载的文件没有损坏，则部署
    deploy_web(local_app_path)
    wget.download(live_ver_url, local_ver_path)   # 部署成功后，更新本地版本文件
