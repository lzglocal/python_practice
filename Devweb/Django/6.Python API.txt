接上一次目录内容
------------------------
Python API 

1. 激活环境   source   /opt/project/bin/activate   
cd /home/mysite 

------------------------------
2.进入项目目录 ，运行 Python manage.py shell  
>>> from polls.models import Question,Choice

---------------------------
3.每个模型默认都有一个管理器，叫object ，用来对数据增删改查   
4.查看所有的Question 实例
>>> Question.objects.all()  

--------------------------------------
5.添加新的问题
(1.) 通过
>>>from django.utils import timezone  或  from datetime import datetime 
>>>q1 = Question(question_text = "春节有什么计划？",pub_date = "timezone.now()")
>>>q1.save() 

(2) 通过objects管理创建    //不用.save保存  
>>> q2 = Question.object.create(
                  question_text="test is ok"  ,pub_date = timezone.now() 
)

q5 = Question.objects.create(question_text="test is ok?",pub_date=datetime.now())      

-----------------------------------------
6.添加新的选项  
（1）通过新建实例的方式 
>>> c1 = Choice(choice_text="加班",question=q5)
>>> c1.save()

（2）通过objects管理创建 
>>> c1 =Choice.objects.create(choice_text="ok",question=q5)

（3）通过问题直接创建选项。具体的问题比如是q5，因为Choice 类有外键，那么问题就有多个选项，
q5也有一个管理器叫choice_set ，如果选项的类名是C ，那么q5的管理器就叫c_set.这个管理器对应的就是该问题所有的选项。
>>> q5.choice_set.create(choice_text="test is no ")

----------------------------------------
7. 通过get 查询，get要求只能返回一个结果，这个结果是一个实例
（1）通过主键查询
>>> Question.objects.get(pk=1)  
（2）通过ID 查询
>>> Question.objects.get(id= 2)       //id =2 是id__exact=2 的简写   
（3）通过其他字段查询
>>> Question.objects.get(question_text="test is ok?") 
（4）如果返回的结果是多项，将出现异常 
>>> Question.objects.get(id__gte=2)   //id >=2 
（5）如果查不到，也会抛出异常
>>> Question.objects.get(id__exact=8)

注：双下划线是属性，python常用的取出属性是句点表示，如  对象.属性 ；在django的条件里，属性都是使用双下划线
astr = "你计划到哪个城市找工作？"
astr.startswich（"你计划"） 
Question.objects.get(question_text_startswich='你计划')
astr.endswith('工作？') 
Question.object.get(question_text_endswith="工作?") 

---------------------------------
8.获得排序的结果  order_by  
order_by  返回的结果是很多对象构成的集合
（1）通过pub_date 进行排序，默认升序  
>>>Question.objects.order_by("pub_date") 
（2）以降序的方式排列
>>> Question.objects.order_by("-pub_date")  
（3）查看对应的SQL  
>>> r1=Question.objects.order_by("pub_date")
>>> print(r1.query)
（4）获得最新的一个问题 。降序的第一个实例，或升序的最后一个实例，注意查询集不支持
>>> Question.objects.order_by("-pub_date")[0]  
>>> r1[len(r1)-1]




------------------------------------
9.条件过滤   
>>> Question.objects.filter(pub_date__year=2020)
>>> Question.objects.filter(pub_date__year=2020).filter(pub_date__month=9).filter(pub_date__day=28)    //过滤年月日   
>>> r4 = Question.objects.filter(pub_date__year=2020).filter(pub_date__month=9)
>>> print(r4.query)


-------------------------
10.修改和删除：首先找到对应的实例，修改就是属性重新赋值
>>>q1 = Question.objects.get(question_text="nihao") 
>>>q1.question_text= "new_nihao"
>>>q1.save()

>>>c1 = Choice.objects.get(choice_text="test is no")
>>> c1.delete()  







